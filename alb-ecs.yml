AWSTemplateFormatVersion: '2010-09-09'
#スタックパラメーター設定
Parameters:
  #環境名
  ENV:
    Type: String
    AllowedValues: ['prod', 'stg', 'dev']
    ConstraintDescription: Enter prod, stg, or dev."
  #サービス名
  ServiceName:
    Type: String
    AllowedPattern: ^[a-z0-9-]*$
    Default: play-store
    ConstraintDescription: Malformed input-Parameter ServiceName must match pattern [a-z0-9-]+
    Description: Enter service name, like 「play-store」
  #システム名
  SystemName:
    Type: String
    AllowedPattern: ^[a-z0-9-]*$
    ConstraintDescription: Malformed input-Parameter SystemName must match pattern [a-z0-9-]+
    Description: Enter service name, like 「venus-api」
  # ALB Type
  ALBSchemaType:
    Type: String
    AllowedValues: ['both', 'internet-facing', 'internal']
    Default: 'both'
    ConstraintDescription: Enter both, internet-facing, or internal."
    Description: Select one ALB Type both(internet-facing & internal), internet-facing or internal
  # コンテナポート
  ContainerPort:
    Type: Number
    MinValue: 1
    MaxValue: 65565
    ConstraintDescription: Malformed input-Parameter ContainerPort must match 1 ~ 65565
    Description: Enter number of container port, like 「8080」
  # SSL ACM ARN
  SSLArn:
    Type: String
    Default: 'arn:aws:acm:ap-northeast-1:845168618390:certificate/976753a5-264e-4e99-94d0-54f7760214ea'
    Description: Specify ACM ARN

  # Target Group Health Check Path
  HealthCheckPathName:
    Type: String
    AllowedPattern: ^[a-z0-9-_]*$
    Default: health_check
    ConstraintDescription: Malformed input-Parameter HealthCheckPathName must match pattern [a-z0-9-_]+
    Description: Enter Target Group Health Check Path, like 「health_check」

  TaskRoleOutputName:
    Type: String
    Default: 'ecs-task-dynamodb-role-arn'
    Description: Output Name of ECS Task Role. Default (ecs-task-dynamodb-role-arn)

Conditions:
  isALBSchemaBoth: !Equals [!Ref ALBSchemaType, 'both']
  hasALBSchemaInternet: !Or
    - !Equals [!Ref ALBSchemaType, 'internet-facing']
    - Condition: isALBSchemaBoth
  hasALBSchemaInternal: !Or
    - !Not [!Equals [!Ref ALBSchemaType, 'internet-facing']]
    - Condition: isALBSchemaBoth
  isProd: !Equals [!Ref ENV, prod]

Resources:
  # Target Group (Public)
  ALBTargetBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: hasALBSchemaInternet
    Properties:
      Name: !Sub ${SystemName}-${ENV}-blue
      VpcId:
        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-VpcId
      UnhealthyThresholdCount: '2'
      HealthCheckPath: !Sub "/${HealthCheckPathName}"
      HealthCheckPort: traffic-port
      TargetType: ip
      Matcher:
        HttpCode: '200'
      Port: !Ref ContainerPort
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${ENV}-blue
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
  ALBTargetGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: hasALBSchemaInternet
    Properties:
      Name: !Sub ${SystemName}-${ENV}-green
      VpcId:
        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-VpcId
      UnhealthyThresholdCount: '2'
      HealthCheckPath: !Sub "/${HealthCheckPathName}"
      HealthCheckPort: traffic-port
      TargetType: ip
      Matcher:
        HttpCode: '200'
      Port: !Ref ContainerPort
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${ENV}-green
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName

  # Target Group (Internal)
  InternalALBTargetBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: hasALBSchemaInternal
    Properties:
      Name: !Sub ${SystemName}-${ENV}-i-blue
      VpcId:
        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-VpcId
      UnhealthyThresholdCount: '2'
      HealthCheckPath: !Sub "/${HealthCheckPathName}"
      HealthCheckPort: traffic-port
      TargetType: ip
      Matcher:
        HttpCode: '200'
      Port: !Ref ContainerPort
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${ENV}-i-blue
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
  InternalALBTargetGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: hasALBSchemaInternal
    Properties:
      Name: !Sub ${SystemName}-${ENV}-i-green
      VpcId:
        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-VpcId
      UnhealthyThresholdCount: '2'
      HealthCheckPath: !Sub "/${HealthCheckPathName}"
      HealthCheckPort: traffic-port
      TargetType: ip
      Matcher:
        HttpCode: '200'
      Port: !Ref ContainerPort
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${ENV}-i-green
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName

  # PublicALB
  PublicALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: hasALBSchemaInternet
    Properties:
      Name: !Sub ${SystemName}-${ENV}-alb
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value:
            Fn::ImportValue: !Sub '${ServiceName}-${ENV}-alb-logs-bucket'
        - Key: access_logs.s3.prefix
          Value: !Sub '${SystemName}/public'
      SecurityGroups:
      - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-alb-sg-id
      Subnets:
      - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-public-subnet-a
      - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-public-subnet-c
      - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-public-subnet-d
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${ENV}-alb
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName

  # InternalALB
  InternalALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: hasALBSchemaInternal
    Properties:
      Name: !Sub ${SystemName}-${ENV}-i-alb
      Type: application
      IpAddressType: ipv4
      Scheme: internal
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value:
            Fn::ImportValue: !Sub '${ServiceName}-${ENV}-alb-logs-bucket'
        - Key: access_logs.s3.prefix
          Value: !Sub '${SystemName}/internal'
      SecurityGroups:
      - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-common-sg-id
      Subnets:
      - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-private-subnet-a
      - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-private-subnet-c
      - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-private-subnet-d
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${ENV}-i-alb
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName

  # ALB Listener (Public)
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: hasALBSchemaInternet
    Properties:
      Port: 443
      Protocol: HTTPS
      LoadBalancerArn: !Ref PublicALB
      Certificates:
        - CertificateArn: !Ref SSLArn
        - !Ref "AWS::NoValue"
      SslPolicy: "ELBSecurityPolicy-2016-08"
      DefaultActions:
      - Type: fixed-response
        FixedResponseConfig:
          ContentType: text/plain
          StatusCode: 404
          MessageBody: 'NotFound'
  ALBBlueGreenListener:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: hasALBSchemaInternet
    DependsOn: ALBListener
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 1
      Conditions:
      - Field: path-pattern
        PathPatternConfig:
          Values:
          - '/*'
      Actions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
          - TargetGroupArn: !Ref ALBTargetBlue
            Weight: 1
          - TargetGroupArn: !Ref ALBTargetGreen
            Weight: 0
  ALBNoSSLRedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: hasALBSchemaInternet
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref PublicALB
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Host: '#{host}'
          Path: '/#{path}'
          Port: 443
          Protocol: HTTPS
          Query: '#{query}'
          StatusCode: HTTP_301

  # ALB Listener (Internal)
  InternalALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: hasALBSchemaInternal
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref InternalALB
      DefaultActions:
      - Type: fixed-response
        FixedResponseConfig:
          ContentType: text/plain
          StatusCode: 404
          MessageBody: 'NotFound'
  InternalALBBlueGreenListener:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: hasALBSchemaInternal
    DependsOn: InternalALBListener
    Properties:
      ListenerArn: !Ref InternalALBListener
      Priority: 1
      Conditions:
      - Field: path-pattern
        PathPatternConfig:
          Values:
          - '/*'
      Actions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
          - TargetGroupArn: !Ref InternalALBTargetBlue
            Weight: 1
          - TargetGroupArn: !Ref InternalALBTargetGreen
            Weight: 0

  # Repository
  ECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${SystemName}-${ENV}
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${ENV}-ecr
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${SystemName}-${ENV}
      ClusterSettings:
        - Name: containerInsights
          Value: !If [isProd, enabled, disabled]
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${ENV}-ecs
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName

  # ECS Task Definitions (Public)
  ECSTaskDefinitionBlue:
    Type: AWS::ECS::TaskDefinition
    Condition: hasALBSchemaInternet
    Properties:
      Family: !Sub ${SystemName}-${ENV}-blue
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: !If [isProd, 1024, 512]
      Memory: !If [isProd, 2048, 1024]
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-ecs-task-execution-role-arn
      TaskRoleArn:
        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-${TaskRoleOutputName}
      ContainerDefinitions:
        - Name: !Sub ${SystemName}-${ENV}-blue
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECR}:${ENV}-blue
          PortMappings:
          - ContainerPort: !Ref ContainerPort
            HostPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: !Sub "/ecs/${SystemName}-${ENV}"
              awslogs-region: ap-northeast-1
              awslogs-stream-prefix: ecs
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${ENV}-blue-task-definition
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
  ECSTaskDefinitionGreen:
    Type: AWS::ECS::TaskDefinition
    Condition: hasALBSchemaInternet
    Properties:
      Family: !Sub ${SystemName}-${ENV}-green
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: !If [isProd, 1024, 512]
      Memory: !If [isProd, 2048, 1024]
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-ecs-task-execution-role-arn
      TaskRoleArn:
        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-${TaskRoleOutputName}
      ContainerDefinitions:
        - Name: !Sub ${SystemName}-${ENV}-green
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECR}:${ENV}-green
          PortMappings:
          - ContainerPort: !Ref ContainerPort
            HostPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: !Sub "/ecs/${SystemName}-${ENV}"
              awslogs-region: ap-northeast-1
              awslogs-stream-prefix: ecs
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${ENV}-green-task-definition
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName

  # ECS Task Definitions (Internal)
  ECSInternalTaskDefinitionBlue:
    Type: AWS::ECS::TaskDefinition
    Condition: hasALBSchemaInternal
    Properties:
      Family: !Sub ${SystemName}-${ENV}-i-blue
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-ecs-task-execution-role-arn
      TaskRoleArn:
        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-${TaskRoleOutputName}
      ContainerDefinitions:
        - Name: !Sub ${SystemName}-${ENV}-i-blue
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECR}:${ENV}-blue
          PortMappings:
          - ContainerPort: !Ref ContainerPort
            HostPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: !Sub "/ecs/${SystemName}-${ENV}-i"
              awslogs-region: ap-northeast-1
              awslogs-stream-prefix: ecs
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${ENV}-i-blue-task-definition
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
  ECSInternalTaskDefinitionGreen:
    Type: AWS::ECS::TaskDefinition
    Condition: hasALBSchemaInternal
    Properties:
      Family: !Sub ${SystemName}-${ENV}-i-green
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-ecs-task-execution-role-arn
      TaskRoleArn:
        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-${TaskRoleOutputName}
      ContainerDefinitions:
        - Name: !Sub ${SystemName}-${ENV}-i-green
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECR}:${ENV}-green
          PortMappings:
          - ContainerPort: !Ref ContainerPort
            HostPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: !Sub "/ecs/${SystemName}-${ENV}-i"
              awslogs-region: ap-northeast-1
              awslogs-stream-prefix: ecs
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${ENV}-green-task-definition
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName

  # ECS Service (Public)
  ECSServiceBlue:
    Type: AWS::ECS::Service
    Condition: hasALBSchemaInternet
    DependsOn:
      - ALBBlueGreenListener
      - ECSTaskDefinitionBlue
    Properties:
      ServiceName: !Sub ${SystemName}-${ENV}-blue
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub ${SystemName}-${ENV}-blue
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ALBTargetBlue
      TaskDefinition: !Ref ECSTaskDefinitionBlue
#      Role:
#        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-ecs-service-role
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-nat-subnet-a
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-nat-subnet-c
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-nat-subnet-d
          SecurityGroups:
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-common-sg-id
  ECSServiceGreen:
    Type: AWS::ECS::Service
    Condition: hasALBSchemaInternet
    DependsOn:
      - ALBBlueGreenListener
      - ECSTaskDefinitionGreen
    Properties:
      ServiceName: !Sub ${SystemName}-${ENV}-green
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub ${SystemName}-${ENV}-green
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ALBTargetGreen
      TaskDefinition: !Ref ECSTaskDefinitionGreen
#      Role:
#        Fn::ImportValue: !Sub ${ServiceName}-${ENV}-ecs-service-role
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-nat-subnet-a
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-nat-subnet-c
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-nat-subnet-d
          SecurityGroups:
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-common-sg-id

  # ECS Service (Internal)
  ECSInternalServiceBlue:
    Type: AWS::ECS::Service
    Condition: hasALBSchemaInternal
    DependsOn:
      - InternalALBBlueGreenListener
      - ECSInternalTaskDefinitionBlue
    Properties:
      ServiceName: !Sub ${SystemName}-${ENV}-i-blue
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub ${SystemName}-${ENV}-i-blue
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref InternalALBTargetBlue
      TaskDefinition: !Ref ECSInternalTaskDefinitionBlue
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-nat-subnet-a
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-nat-subnet-c
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-nat-subnet-d
          SecurityGroups:
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-common-sg-id
  ECSInternalServiceGreen:
    Type: AWS::ECS::Service
    Condition: hasALBSchemaInternal
    DependsOn:
      - InternalALBBlueGreenListener
      - ECSInternalTaskDefinitionGreen
    Properties:
      ServiceName: !Sub ${SystemName}-${ENV}-i-green
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub ${SystemName}-${ENV}-i-green
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref InternalALBTargetGreen
      TaskDefinition: !Ref ECSInternalTaskDefinitionGreen
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-nat-subnet-a
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-nat-subnet-c
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-nat-subnet-d
          SecurityGroups:
            - Fn::ImportValue: !Sub ${ServiceName}-${ENV}-common-sg-id

  # ECS Service ScalableTarget (Public)
  AutoScalingTargetBlue:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: hasALBSchemaInternet
    Properties:
      MinCapacity: 0
      MaxCapacity: 10
      ResourceId: !Sub
        - 'service/${Cluster}/${Service}'
        - Cluster: !Ref ECSCluster
          Service: !GetAtt 'ECSServiceBlue.Name'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub
        arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  AutoScalingTargetGreen:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: hasALBSchemaInternet
    Properties:
      MinCapacity: 0
      MaxCapacity: 10
      ResourceId: !Sub
        - 'service/${Cluster}/${Service}'
        - Cluster: !Ref ECSCluster
          Service: !GetAtt 'ECSServiceGreen.Name'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub
        arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  # ECS Service ScalableTarget (Internal)
  InternalAutoScalingTargetBlue:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: hasALBSchemaInternal
    Properties:
      MinCapacity: 0
      MaxCapacity: 10
      ResourceId: !Sub
        - 'service/${Cluster}/${Service}'
        - Cluster: !Ref ECSCluster
          Service: !GetAtt 'ECSInternalServiceBlue.Name'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub
        arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  InternalAutoScalingTargetGreen:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: hasALBSchemaInternal
    Properties:
      MinCapacity: 0
      MaxCapacity: 10
      ResourceId: !Sub
        - 'service/${Cluster}/${Service}'
        - Cluster: !Ref ECSCluster
          Service: !GetAtt 'ECSInternalServiceGreen.Name'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub
        arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  # ECS Service ScalablePolicy (Public)
  AutoScallingPolicyBlue:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: hasALBSchemaInternet
    DependsOn:
      - ECSServiceBlue
    Properties:
      PolicyName: !Sub ${SystemName}-${ENV}-blue-auto-scaling
      ScalingTargetId: !Ref AutoScalingTargetBlue
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60

  AutoScallingPolicyGreen:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: hasALBSchemaInternet
    DependsOn:
      - ECSServiceGreen
    Properties:
      PolicyName: !Sub ${SystemName}-${ENV}-green-auto-scaling
      ScalingTargetId: !Ref AutoScalingTargetGreen
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60

  # ECS Service ScalablePolicy (Internal)
  InternalAutoScallingPolicyBlue:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: hasALBSchemaInternal
    DependsOn:
      - ECSInternalServiceBlue
    Properties:
      PolicyName: !Sub ${SystemName}-${ENV}-blue-i-auto-scaling
      ScalingTargetId: !Ref InternalAutoScalingTargetBlue
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60

  InternalAutoScallingPolicyGreen:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: hasALBSchemaInternal
    DependsOn:
      - ECSInternalServiceGreen
    Properties:
      PolicyName: !Sub ${SystemName}-${ENV}-green-i-auto-scaling
      ScalingTargetId: !Ref InternalAutoScalingTargetGreen
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60

#  ServiceScaleOutGreenAlarm: Type: AWS::AutoScalingPlans::ScalingPlan
#    Properties:
#      ApplicationSource:
#        CloudFormationStackARN:
#
#      ScalingInstructions:
#        - fff

Outputs:
  ECRepository:
    Description: EC Repository Path
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECR}
  ECRBlue:
    Description: EC Repository Path
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECR}:prod-blue
  ECRGreen:
    Description: EC Repository Path
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECR}:prod-green
  ALBListener:
    Description: ALB Listener ARN
    Value: !If [hasALBSchemaInternet, !Ref ALBListener, ""]
  InternalALBListener:
    Description: InternalALB Listener ARN
    Value: !If [hasALBSchemaInternal, !Ref InternalALBListener, ""]
  SystemName:
    Description: Sub System Name
    Value: !Ref SystemName