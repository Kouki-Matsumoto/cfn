AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Base Setting
        Parameters:
          - ENV
          - ServiceName
      - Label:
          default: VPC Peer Connection Parameters
        Parameters:
          - PeerConnectionId1
          - PeerVpcCidrBlock1
      - Label:
          default: Nat Gateway Parameters
        Parameters:
          - NatIPAllocationId
          - NatIPAllocationIdAzC
          - NatIPAllocationIdAzD
          - EnableNatGatwayMultiAZ
      - Label:
          default: Options
        Parameters:
          - MigrationHubServerID

#スタックパラメーター設定
Parameters:
  #環境名
  ENV:
    Type: String
    AllowedValues: ['prod', 'stg', 'dev']
    ConstraintDescription: Enter prod, stg, or dev."
  #サービス名
  ServiceName:
    Type: String
    AllowedPattern: ^[a-z0-9-]*$
    Default: play-store
    ConstraintDescription: Malformed input-Parameter ServiceName must match pattern [a-z0-9-]+
    Description: Enter service name, like 「play-store」

  # NATGatewayに紐付けるElasticIPの割り当てID。未指定だとEIPから作る
  NatIPAllocationId:
    Type: String
    Default: ''
    AllowedPattern: ^($|[a-z]+-[a-z0-9]+$)
    ConstraintDescription: "Malformed input-Parameter NatIPAllocationId must match pattern ^[a-z]+-[a-z0-9]+$"
    Description: Enter ElasticIP Allocation ID, like 「eipalloc-001a5b9d6980eed9f」

  # NATGatewayに紐付けるElasticIPの割り当てID。未指定だとEIPから作る (EnableNatGatwayMultiAZ=trueの場合のみ有効)
  NatIPAllocationIdAzC:
    Type: String
    Default: ''
    AllowedPattern: ^($|[a-z]+-[a-z0-9]+$)
    ConstraintDescription: "Malformed input-Parameter NatIPAllocationId must match pattern ^[a-z]+-[a-z0-9]+$"
    Description: Enter ElasticIP Allocation ID, like 「eipalloc-001a5b9d6980eed9f」 ※ Enable only EnableNatGatwayMultiAZ is `true`

  # NATGatewayに紐付けるElasticIPの割り当てID。未指定だとEIPから作る (EnableNatGatwayMultiAZ=trueの場合のみ有効)
  NatIPAllocationIdAzD:
    Type: String
    Default: ''
    AllowedPattern: ^($|[a-z]+-[a-z0-9]+$)
    ConstraintDescription: "Malformed input-Parameter NatIPAllocationId must match pattern ^[a-z]+-[a-z0-9]+$"
    Description: Enter ElasticIP Allocation ID, like 「eipalloc-001a5b9d6980eed9f」※ Enable only EnableNatGatwayMultiAZ is `true`

  # NATGatewayをマルチAZ構成にする
  EnableNatGatwayMultiAZ:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
    ConstraintDescription: Enter true or false.'

  # For VPC Peering
  # #1
  PeerConnectionId1:
    Type: String
    Default: ''
    AllowedPattern: ^($|[a-z]+-[a-z0-9]+$)
    ConstraintDescription: "Malformed input-Parameter PeerConnectionId1 must match pattern ^[a-z]+-[a-z0-9]+$"
    Description: Enter Peering VPC ID, like 「pcx-0fcf4c3dc68159d88」

  PeerVpcCidrBlock1:
    Type: String
    Default: ''
    Description: Enter Peering VPC ID, like 「10.1.0.0/16」

  # MigrationHubServerID
  MigrationHubServerID:
    Type: String
    ConstraintDescription: Malformed Input-Parameter must match pattern [a-z0-9-_]+
    Description: Enter Migration Hub Server ID, like 「d-server-000zia7b0qhil8」
    Default: ''

Conditions:
  isNatGatwayMultiAZ: !Equals [!Ref EnableNatGatwayMultiAZ, 'true']

  specifyNatIpAID: !Not [!Equals [!Ref NatIPAllocationId, '']]
  noSpecifyNatIpAID: !Equals [!Ref NatIPAllocationId, '']

  specifyNatIpAIDAzC: !Not [!Equals [!Ref NatIPAllocationIdAzC, '']]
  noSpecifyNatIpAIDAzC: !And
    - !Equals [!Ref NatIPAllocationIdAzC, '']
    - Condition: isNatGatwayMultiAZ

  specifyNatIpAIDAzD: !Not [!Equals [!Ref NatIPAllocationIdAzD, '']]
  noSpecifyNatIpAIDAzD: !And
    - !Equals [!Ref NatIPAllocationIdAzD, '']
    - Condition: isNatGatwayMultiAZ

  HasPeerVpc1: !And
    - !Not [!Equals [!Ref PeerConnectionId1, '']]
    - !Not [!Equals [!Ref PeerVpcCidrBlock1, '']]

  HasMigrationHubServerID: !Not [!Equals [!Ref MigrationHubServerID, '']]

Mappings:
  EnvCidrBlock:
    prod:
      vpc: '10.30.0.0/16'
      subnetPublicA: '10.30.0.0/22'
      subnetPublicC: '10.30.4.0/22'
      subnetPublicD: '10.30.8.0/22'
      subnetPrivateA: '10.30.12.0/22'
      subnetPrivateC: '10.30.16.0/22'
      subnetPrivateD: '10.30.20.0/22'
      subnetNatA: '10.30.24.0/22'
      subnetNatC: '10.30.28.0/22'
      subnetNatD: '10.30.32.0/22'
      subnetPublicIgwA: '10.30.36.0/22'
      subnetPublicIgwC: '10.30.40.0/22'
      subnetPublicIgwD: '10.30.44.0/22'
    stg:
      vpc: '10.44.0.0/16'
      subnetPublicA: '10.44.0.0/22'
      subnetPublicC: '10.44.4.0/22'
      subnetPublicD: '10.44.8.0/22'
      subnetPrivateA: '10.44.12.0/22'
      subnetPrivateC: '10.44.16.0/22'
      subnetPrivateD: '10.44.20.0/22'
      subnetNatA: '10.44.24.0/22'
      subnetNatC: '10.44.28.0/22'
      subnetNatD: '10.44.32.0/22'
      subnetPublicIgwA: '10.44.36.0/22'
      subnetPublicIgwC: '10.44.40.0/22'
      subnetPublicIgwD: '10.44.44.0/22'
    dev:
      vpc: '10.32.0.0/16'
      subnetPublicA: '10.32.0.0/22'
      subnetPublicC: '10.32.4.0/22'
      subnetPublicD: '10.32.8.0/22'
      subnetPrivateA: '10.32.12.0/22'
      subnetPrivateC: '10.32.16.0/22'
      subnetPrivateD: '10.32.20.0/22'
      subnetNatA: '10.32.24.0/22'
      subnetNatC: '10.32.28.0/22'
      subnetNatD: '10.32.32.0/22'
      subnetPublicIgwA: '10.32.36.0/22'
      subnetPublicIgwC: '10.32.40.0/22'
      subnetPublicIgwD: '10.32.44.0/22'

Resources:

####################################### VPC ############################################

  # ------------------------------------------------------------#
  # VPC
  # ------------------------------------------------------------#
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, vpc]
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-vpc
        - Key: Environment
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

####################################### Subnet ############################################

  # ------------------------------------------------------------#
  # Public Subnet for AZ 1a
  # ------------------------------------------------------------#
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, subnetPublicA]
      AvailabilityZone: 'ap-northeast-1a'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-public-subnet-a
        - Key: Environment
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Public Subnet for AZ 1c
  # ------------------------------------------------------------#
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, subnetPublicC]
      AvailabilityZone: 'ap-northeast-1c'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-public-subnet-c
        - Key: Environment
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Public Subnet for AZ 1d
  # ------------------------------------------------------------#
  PublicSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, subnetPublicD]
      AvailabilityZone: 'ap-northeast-1d'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-public-subnet-d
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Private Subnet for AZ 1a
  # ------------------------------------------------------------#
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, subnetPrivateA]
      AvailabilityZone: 'ap-northeast-1a'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-private-subnet-a
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Private Subnet for AZ 1c
  # ------------------------------------------------------------#
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, subnetPrivateC]
      AvailabilityZone: 'ap-northeast-1c'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-private-subnet-c
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Private Subnet for AZ 1d
  # ------------------------------------------------------------#
  PrivateSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, subnetPrivateD]
      AvailabilityZone: 'ap-northeast-1d'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-private-subnet-d
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # NAT Subnet for AZ 1a
  # ------------------------------------------------------------#
  NatSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, subnetNatA]
      AvailabilityZone: 'ap-northeast-1a'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-nat-subnet-a
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # NAT Subnet for AZ 1c
  # ------------------------------------------------------------#
  NatSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, subnetNatC]
      AvailabilityZone: 'ap-northeast-1c'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-nat-subnet-c
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # NAT Subnet for AZ 1d
  # ------------------------------------------------------------#
  NatSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, subnetNatD]
      AvailabilityZone: 'ap-northeast-1d'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-nat-subnet-d
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Public Internet GW Subnet for AZ 1a
  # ------------------------------------------------------------#
  PublicIgwSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, subnetPublicIgwA]
      AvailabilityZone: 'ap-northeast-1a'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-public-igw-subnet-a
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Public Internet GW Subnet for AZ 1c
  # ------------------------------------------------------------#
  PublicIgwSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, subnetPublicIgwC]
      AvailabilityZone: 'ap-northeast-1c'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-public-igw-subnet-c
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Public Internet GW Subnet for AZ 1d
  # ------------------------------------------------------------#
  PublicIgwSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [EnvCidrBlock, !Ref  ENV, subnetPublicIgwD]
      AvailabilityZone: 'ap-northeast-1d'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-public-igw-subnet-d
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

####################################### RouteTable ############################################

  # ------------------------------------------------------------#
  # Public RouteTable
  # ------------------------------------------------------------#
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${ServiceName}-${ENV}-route-table-public
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
      - !If
        - HasMigrationHubServerID
        - Key: map-migrated
          Value: !Ref MigrationHubServerID
        - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Private RouteTable
  # ------------------------------------------------------------#
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${ServiceName}-${ENV}-private-route-table
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
      - !If
        - HasMigrationHubServerID
        - Key: map-migrated
          Value: !Ref MigrationHubServerID
        - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # NAT RouteTable
  # ------------------------------------------------------------#
  NatRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${ServiceName}-${ENV}-nat-route-table
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
      - !If
        - HasMigrationHubServerID
        - Key: map-migrated
          Value: !Ref MigrationHubServerID
        - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # NAT RouteTable for AZ 1c
  # ------------------------------------------------------------#
  NatRouteTableC:
    Type: AWS::EC2::RouteTable
    Condition: isNatGatwayMultiAZ
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${ServiceName}-${ENV}-nat-route-table-c
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
      - !If
        - HasMigrationHubServerID
        - Key: map-migrated
          Value: !Ref MigrationHubServerID
        - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # NAT RouteTable for AZ 1d
  # ------------------------------------------------------------#
  NatRouteTableD:
    Type: AWS::EC2::RouteTable
    Condition: isNatGatwayMultiAZ
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${ServiceName}-${ENV}-nat-route-table-d
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
      - !If
        - HasMigrationHubServerID
        - Key: map-migrated
          Value: !Ref MigrationHubServerID
        - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Public Internet GW RouteTable
  # ------------------------------------------------------------#
  PublicIgwRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${ServiceName}-${ENV}-nat-igw-route-table
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
      - !If
        - HasMigrationHubServerID
        - Key: map-migrated
          Value: !Ref MigrationHubServerID
        - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Public Internet GW RouteTable for AZ 1c
  # ------------------------------------------------------------#
  PublicIgwRouteTableC:
    Type: AWS::EC2::RouteTable
    Condition: isNatGatwayMultiAZ
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${ServiceName}-${ENV}-nat-igw-route-table-c
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
      - !If
        - HasMigrationHubServerID
        - Key: map-migrated
          Value: !Ref MigrationHubServerID
        - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Public Internet GW RouteTable for AZ 1d
  # ------------------------------------------------------------#
  PublicIgwRouteTableD:
    Type: AWS::EC2::RouteTable
    Condition: isNatGatwayMultiAZ
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${ServiceName}-${ENV}-nat-igw-route-table-d
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
      - !If
        - HasMigrationHubServerID
        - Key: map-migrated
          Value: !Ref MigrationHubServerID
        - !Ref AWS::NoValue

####################################### Internet Gateway ############################################

  # ------------------------------------------------------------#
  # Internet Gateway
  # ------------------------------------------------------------#
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${ServiceName}-${ENV}-igw
      - Key: ENV
        Value: !Ref ENV
      - Key: Project
        Value: !Ref ServiceName
      - !If
        - HasMigrationHubServerID
        - Key: map-migrated
          Value: !Ref MigrationHubServerID
        - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # Internet Gateway on VPC
  # ------------------------------------------------------------#
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: InternetGateway
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


####################################### ElasticIP ############################################

  # ------------------------------------------------------------#
  # ElasticIP For NAT Gateway 1
  # ------------------------------------------------------------#
  NatEIP:
    Type: AWS::EC2::EIP
    Condition: noSpecifyNatIpAID
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-nat-eip
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # ElasticIP For NAT Gateway 2
  # ------------------------------------------------------------#
  NatEIP2:
    Type: AWS::EC2::EIP
    Condition: noSpecifyNatIpAIDAzC
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-nat-eip-c
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # ElasticIP For NAT Gateway 3
  # ------------------------------------------------------------#
  NatEIP3:
    Type: AWS::EC2::EIP
    Condition: noSpecifyNatIpAIDAzD
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-nat-eip-d
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

####################################### NAT Gateway ############################################

  # ------------------------------------------------------------#
  # NAT Gateway for AZ a
  # ------------------------------------------------------------#
  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !If [specifyNatIpAID, !Ref NatIPAllocationId, !GetAtt NatEIP.AllocationId]
      SubnetId: !Ref PublicIgwSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-nat-gw
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # NAT Gateway for AZ c
  # ------------------------------------------------------------#
  NATGatewayC:
    Type: "AWS::EC2::NatGateway"
    Condition: isNatGatwayMultiAZ
    Properties:
      AllocationId: !If [specifyNatIpAIDAzC, !Ref NatIPAllocationIdAzC, !GetAtt NatEIP2.AllocationId]
      SubnetId: !Ref PublicIgwSubnetC
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-nat-gw-c
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # NAT Gateway for AZ d
  # ------------------------------------------------------------#
  NATGatewayD:
    Type: "AWS::EC2::NatGateway"
    Condition: isNatGatwayMultiAZ
    Properties:
      AllocationId: !If [specifyNatIpAIDAzD, !Ref NatIPAllocationIdAzD, !GetAtt NatEIP3.AllocationId]
      SubnetId: !Ref PublicIgwSubnetD
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-nat-gw-d
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue


####################################### Route ############################################

  # ------------------------------------------------------------#
  # Attatch Public Route
  # ------------------------------------------------------------#
  AttachPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # ------------------------------------------------------------#
  # Attatch Public Internet GW Route
  # ------------------------------------------------------------#
  AttachPublicIgwRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicIgwRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # ------------------------------------------------------------#
  # Attatch Public Internet GW Route for AZ 1c
  # ------------------------------------------------------------#
  AttachPublicIgwRouteC:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Condition: isNatGatwayMultiAZ
    Properties:
      RouteTableId: !Ref PublicIgwRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # ------------------------------------------------------------#
  # Attatch Public Internet GW Route for AZ 1d
  # ------------------------------------------------------------#
  AttachPublicIgwRouteD:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Condition: isNatGatwayMultiAZ
    Properties:
      RouteTableId: !Ref PublicIgwRouteTableD
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # ------------------------------------------------------------#
  # Attatch NAT Route
  # ------------------------------------------------------------#
  AttachNatRoute:
    Type: AWS::EC2::Route
    DependsOn: NATGateway
    Properties:
      RouteTableId: !Ref NatRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # ------------------------------------------------------------#
  # Attatch NAT Route for AZ 1c
  # ------------------------------------------------------------#
  AttachNatRouteC:
    Type: AWS::EC2::Route
    DependsOn: NATGatewayC
    Condition: isNatGatwayMultiAZ
    Properties:
      RouteTableId: !Ref NatRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayC

  # ------------------------------------------------------------#
  # Attatch NAT Route for AZ 1d
  # ------------------------------------------------------------#
  AttachNatRouteD:
    Type: AWS::EC2::Route
    DependsOn: NATGatewayD
    Condition: isNatGatwayMultiAZ
    Properties:
      RouteTableId: !Ref NatRouteTableD
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayD

  # ------------------------------------------------------------#
  # Attatch Private Route
  # ------------------------------------------------------------#
  AttachPrivateRouteForPeerVPC1:
    Type: AWS::EC2::Route
    Condition: HasPeerVpc1
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Ref PeerVpcCidrBlock1
      VpcPeeringConnectionId: !Ref PeerConnectionId1


####################################### Subnet RouteTable  Association ############################################

  # ------------------------------------------------------------#
  # Public Subnet for AZ 1a to Public RouteTable
  # ------------------------------------------------------------#
  AttachPublicSubnetAToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  # ------------------------------------------------------------#
  # Public Subnet for AZ 1c to Public RouteTable
  # ------------------------------------------------------------#
  AttachPublicSubnetCToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  # ------------------------------------------------------------#
  # Public Subnet for AZ 1d to Public RouteTable
  # ------------------------------------------------------------#
  AttachPublicSubnetDToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetD

  # ------------------------------------------------------------#
  # Private Subnet for AZ 1a to Private RouteTable
  # ------------------------------------------------------------#
  AttachPrivateSubnetAToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  # ------------------------------------------------------------#
  # Private Subnet for AZ 1c to Private RouteTable
  # ------------------------------------------------------------#
  AttachPrivateSubnetCToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC

  # ------------------------------------------------------------#
  # Private Subnet for AZ 1d to Private RouteTable
  # ------------------------------------------------------------#
  AttachPrivateSubnetDToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetD

  # ------------------------------------------------------------#
  # NAT Subnet for AZ 1a to NAT RouteTable
  # ------------------------------------------------------------#
  AttachNatSubnetAToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable
      SubnetId: !Ref NatSubnetA

  # ------------------------------------------------------------#
  # NAT Subnet for AZ 1c to NAT RouteTable
  # ------------------------------------------------------------#
  AttachNatSubnetCToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !If [isNatGatwayMultiAZ, !Ref NatRouteTableC, !Ref NatRouteTable]
      SubnetId: !Ref NatSubnetC

  # ------------------------------------------------------------#
  # NAT Subnet for AZ 1d to NAT RouteTable
  # ------------------------------------------------------------#
  AttachNatSubnetDToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !If [isNatGatwayMultiAZ, !Ref NatRouteTableD, !Ref NatRouteTable]
      SubnetId: !Ref NatSubnetD

  # ------------------------------------------------------------#
  # Public Internet GW Subnet for AZ 1a to Public Internet GW RouteTable
  # ------------------------------------------------------------#
  AttachPublicIgwSubnetAToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicIgwRouteTable
      SubnetId: !Ref PublicIgwSubnetA

  # ------------------------------------------------------------#
  # Public Internet GW Subnet for AZ 1c to Public Internet GW RouteTable
  # ------------------------------------------------------------#
  AttachPublicIgwSubnetCToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !If [isNatGatwayMultiAZ, !Ref PublicIgwRouteTableC, !Ref PublicIgwRouteTable]
      SubnetId: !Ref PublicIgwSubnetC

  # ------------------------------------------------------------#
  # Public Internet GW Subnet for AZ 1d to Public Internet GW RouteTable
  # ------------------------------------------------------------#
  AttachPublicIgwSubnetDToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !If [isNatGatwayMultiAZ, !Ref PublicIgwRouteTableD, !Ref PublicIgwRouteTable]
      SubnetId: !Ref PublicIgwSubnetD

####################################### VPC Endpoint ############################################

  # ------------------------------------------------------------#
  # VPC Endpoint for DynamoDB
  # ------------------------------------------------------------#
  VPCEndPointForDynamoDB:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: !Sub '{
        "Version":"2012-10-17",
        "Statement":[{
          "Effect":"Allow",
          "Principal": "*",
          "Action": "*",
          "Resource": "*"
        }]
      }'
      RouteTableIds:
        - !Ref PrivateRouteTable
        - !Ref NatRouteTable
        - !If [isNatGatwayMultiAZ, !Ref NatRouteTableC, !Ref 'AWS::NoValue']
        - !If [isNatGatwayMultiAZ, !Ref NatRouteTableD, !Ref 'AWS::NoValue']
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb

  # ------------------------------------------------------------#
  # VPC Endpoint for S3
  # ------------------------------------------------------------#
  VPCEndPointForS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: !Sub '{
        "Version":"2012-10-17",
        "Statement":[{
          "Effect":"Allow",
          "Principal": "*",
          "Action": "*",
          "Resource": "*"
        }]
      }'
      RouteTableIds:
        - !Ref PrivateRouteTable
        - !Ref NatRouteTable
        - !If [isNatGatwayMultiAZ, !Ref NatRouteTableC, !Ref 'AWS::NoValue']
        - !If [isNatGatwayMultiAZ, !Ref NatRouteTableD, !Ref 'AWS::NoValue']
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3

  # ------------------------------------------------------------#
  # VPC Endpoint for Api Gateway
  # ------------------------------------------------------------#
  VPCEndPointForApiGateway:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: !Sub '{
        "Version":"2012-10-17",
        "Statement":[{
          "Effect":"Allow",
          "Principal": "*",
          "Action": "*",
          "Resource": "*"
        }]
      }'
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref NatSubnetA
        - !Ref NatSubnetC
        - !Ref NatSubnetD
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api

####################################### Subnet Group ############################################

  # ------------------------------------------------------------#
  # SubnetGroup for ElastiCache
  # ------------------------------------------------------------#
  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: !Sub ${ServiceName}-${ENV}-elasticache-subnet-group
      Description: !Sub ${ServiceName}-${ENV}-elasticache-subnet-group
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
        - !Ref PrivateSubnetD
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-elasticache-subnet-group
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

  # ------------------------------------------------------------#
  # SubnetGroup for RDS
  # ------------------------------------------------------------#
  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: !Sub ${ServiceName}-${ENV}-rds-subnet-group
      DBSubnetGroupDescription: !Sub ${ServiceName}-${ENV}-rds-subnet-group
      SubnetIds:
      - !Ref PrivateSubnetA
      - !Ref PrivateSubnetC
      - !Ref PrivateSubnetD
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${ENV}-rds-subnet-group
        - Key: ENV
          Value: !Ref ENV
        - Key: Project
          Value: !Ref ServiceName
        - !If
          - HasMigrationHubServerID
          - Key: map-migrated
            Value: !Ref MigrationHubServerID
          - !Ref AWS::NoValue

####################################### Outputs ############################################

Outputs:
  VpcId:
    Description: Vpc id
    Value: !Ref VPC
    Export:
      Name: !Sub ${ServiceName}-${ENV}-VpcId

  PublicSubnetAId:
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${ServiceName}-${ENV}-public-subnet-a
  PublicSubnetCId:
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub ${ServiceName}-${ENV}-public-subnet-c
  PublicSubnetDId:
    Value: !Ref PublicSubnetD
    Export:
      Name: !Sub ${ServiceName}-${ENV}-public-subnet-d

  PrivateSubnetAId:
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${ServiceName}-${ENV}-private-subnet-a
  PrivateSubnetCId:
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub ${ServiceName}-${ENV}-private-subnet-c
  PrivateSubnetDId:
    Value: !Ref PrivateSubnetD
    Export:
      Name: !Sub ${ServiceName}-${ENV}-private-subnet-d

  NatSubnetAId:
    Value: !Ref NatSubnetA
    Export:
      Name: !Sub ${ServiceName}-${ENV}-nat-subnet-a
  NatSubnetCId:
    Value: !Ref NatSubnetC
    Export:
      Name: !Sub ${ServiceName}-${ENV}-nat-subnet-c
  NatSubnetDId:
    Value: !Ref NatSubnetD
    Export:
      Name: !Sub ${ServiceName}-${ENV}-nat-subnet-d

  PublicIgwSubnetAId:
    Value: !Ref PublicIgwSubnetA
    Export:
      Name: !Sub ${ServiceName}-${ENV}-public-igw-subnet-a
  PublicIgwSubnetCId:
    Value: !Ref PublicIgwSubnetC
    Export:
      Name: !Sub ${ServiceName}-${ENV}-public-igw-subnet-c
  PublicIgwSubnetDId:
    Value: !Ref PublicIgwSubnetD
    Export:
      Name: !Sub ${ServiceName}-${ENV}-public-igw-subnet-d

  ElastiCacheSubnetGroup:
    Value: !Ref ElastiCacheSubnetGroup
    Export:
      Name: !Sub ${ServiceName}-${ENV}-elasticache-subnet-group

  RDSSubnetGroup:
    Value: !Ref RDSSubnetGroup
    Export:
      Name: !Sub ${ServiceName}-${ENV}-rds-subnet-group

  DynamoDBVPCEndPointId:
    Value: !Ref VPCEndPointForDynamoDB
    Export:
      Name: !Sub ${ServiceName}-${ENV}-dynamodb-vpc-endpoint-id
  S3VPCEndPointId:
    Value: !Ref VPCEndPointForS3
    Export:
      Name: !Sub ${ServiceName}-${ENV}-s3-vpc-endpoint-id
  ApiGatewayVPCEndPointId:
    Value: !Ref VPCEndPointForApiGateway
    Export:
      Name: !Sub ${ServiceName}-${ENV}-execute-api-vpc-endpoint-id
